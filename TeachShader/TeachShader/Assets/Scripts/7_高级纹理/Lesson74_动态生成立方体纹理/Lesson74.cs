using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Lesson74 : MonoBehaviour
{
    // Start is called before the first frame update
    void Start()
    {
        #region 知识点一 为什么要动态生成立方体纹理？
        //我们之前学习的知识中提到过
        //立方体纹理的其中一个最大的作用就是环境映射
        //在实现反射、折射等等效果时，需要用到立方体纹理来制作对应效果
        //而立方体纹理中最重要的就是组成它的6张2D纹理图片

        //对于之前学过的天空盒来说，6张2D纹理图片可以根据想要的美术表现效果来进行自定义制作
        //提前把纹理制作好，直接使用即可
        //这种立方体纹理往往是被提前做好的，是场景中物体们共用的

        //但如果制作反射、折射等效果还是使用这样的立方体纹理，效果肯定不够理想
        //因为物体在场景上的位置不同，产生的对应效果也会是不同的
        //举例说明

        //因此为了更好更真实的表现效果，对于场景中不同位置的物体
        //我们应该为它们在不同位置生成不同的立方体纹理（6张2D纹理贴图）
        #endregion

        #region 知识点二 如何动态生成立方体纹理？
        //我们将结合
        //1.Unity编辑器拓展
        //2.Camera中的RenderToCubemap方法
        //这两个知识点，在对应位置生成对应的立方体纹理贴图
        //对于一些场景展示类项目，我们不需要实时生成，只需要在编辑器模式下生成一次即可
        //主要要完成的功能为：
        //1.自定义编辑器窗口，关联对象（通过对象来指定位置）和cubemap变量
        //2.自定义窗口中有一个生成按钮，点击后使用Camera中的RenderToCubemap自动生成对应的6张2D纹理贴图

        //其中编辑器窗口相关功能使用Unity编辑器拓展相关知识
        //自动生成立方体纹理贴图功能使用Camera中的RenderToCubemap方法
        //该方法可以将任意位置观察到的场景图像存储到6张图像中
        #endregion

        #region 知识点三 动态生成立方体纹理
        //按照知识点二中的制作思路来实现逻辑
        //1.新建一个脚本 RenderToCubemap 放在Editor文件夹中
        //2.让该类继承EditorWindow 将其作为一个编辑器窗口类
        //3.实现打开该窗口的静态函数
        //4.实现OnGUI中的窗口布局，添加以下控件
        //  4-1:关联位置对象的控件
        //  4-2:关联立方体纹理贴图的空间
        //  4-3.生成按钮
        //5.实现具体逻辑
        //  注意点：
        //  1.我们通过动态创建一个空物体为它添加摄像机组件的形式生成立方体纹理贴图
        //    该对象为临时对象，使用完毕后即时删除即可
        //  2.cubemap上需要勾选Readable
        //  3.分辨率决定了清晰度
        #endregion

        #region 知识点四 在运行时动态生成
        //Camera中的RenderToCubemap也可以在运行时实时动态生成立方体纹理
        //但是要注意对性能的影响
        //1.在LateUpdate中使用
        //2.降低立方体纹理贴图的分辨率
        //3.分帧渲染，RenderToCubemap有重载，可以一个面一个面的渲染
        //4.降低更新频率，不要每帧执行
        //等等
        #endregion
    }

    // Update is called once per frame
    void Update()
    {
        
    }
}
